//DDA LINE
#include<stdio.h>
#include<graphics.h>
#include<math.h>       
void line1(int,int,int,int);
main()
{
   int gd=DETECT,gm,i;
   int x1,y1,x2,y2;
   printf("\n Enter the co-ordinates \n");
   scanf("\n%d\n%d\n%d\n%d",&x1,&y1,&x2,&y2);
   initgraph(&gd,&gm,"");
   line1(x1,y1,x2,y2);
   getch();
}
void line1(int x1,int y1,int x2,int y2)
{
  double xinc,yinc,dx,dy,l,x,y;
  int i=0;
  dx=x2-x1;
  dy=y2-y1;
  if(dx>dy)
  {
    l=dx;
  }
  else
  {
    l=dy;
  }
  xinc=dx/l;
  yinc=dy/l;
  putpixel(x1,y1,4);
  x=x1;
  y=y1;
  for(i=0;i<=l;i++)
  {
    x=x+xinc;
    y=y+yinc;
    putpixel(round(x),round(y),4);
  }
}
  



//MIDPOINT LINE
#include<stdio.h>
#include<graphics.h>
void line1(int,int,int,int);
main()
{
  int gd=DETECT,gm;
  int x1,y1,x2,y2;
  printf("\n Enter the co-ordinates \n");
  scanf("\n %d \n %d \n %d \n %d",&x1,&y1,&x2,&y2);
  initgraph(&gd,&gm,"");
  line1(x1,y1,x2,y2);
  getch();
}
void line1(int x1,int y1,int x2,int y2)
{
  int d,ince,incn,dx,dy,x,y;
  dx=x2-x1;
  dy=y2-y1;
  d=2*dx-dy;
  ince=2*dx;
  incn=2*(dx-dy);
  x=x1;
  y=y1;
  putpixel(x1,y1,4);
  while(y<y2)
  {
    if(d<=0)
    {
      d=d+ince;
      y++;
    }
    else
    {
      d=d+incn;
      x++;
      y++;
    }
   putpixel(x,y,4);
  }
}





//MIDPOINT CIRCLE
#include<stdio.h>
#include<graphics.h>
void circle1(int,int,int);
void circlepoint(int,int,int,int);
main()
{
  int gd=DETECT,gm;
  int r1,c1,c2;
  printf("\n Enter the radius \n");
  scanf("\n %d",&r1);
  printf("\n Enter the center co-ordinates \n");
  scanf("\n %d \n %d",&c1,&c2);
  initgraph(&gd,&gm,"");
  circle1(r1,c1,c2);
  getch();
}
void circle1(int r2,int c1,int c2)
{
  int x,y,d,q,w;
  x=0;
  y=r2;
  d=1-r2;
  q=c1;
  w=c2;
  circlepoint(x,y,q,w);
  while(y>x)
  {
    if(d<0)
    {
      d=(d+(2*x+3));
    }
    else
    {
      d=(d+(2*(x-y))+5);
      y--;
    }
    x++;
    circlepoint(x,y,q,w);
  }
}
void circlepoint(int x,int y,int c1,int c2)
{
  putpixel((x+c1),(y+c2),4);
  putpixel((y+c1),(x+c2),4);
  putpixel((y+c1),-x+c2,4);
  putpixel((x+c1),-y+c2,4);
  putpixel(-x+c1,-y+c2,4);
  putpixel(-y+c1,-x+c2,4);
  putpixel(-y+c1,(x+c2),4);
  putpixel(-x+c1,(y+c2),4);
}




//SMILEY
#include<stdio.h>
#include<graphics.h>
void line1(int,int,int,int);
main()
{
  int gd=DETECT,gm,e,f,c,h,i;
  initgraph(&gd,&gm,"");
  setcolor(YELLOW); 
  e=getmaxy();
  f=getmaxx();
  circle(f/2,e/2,100);
  c=(f/2);
  h=(e/2);
  floodfill(c+50,h+50,YELLOW);
  setcolor(BLACK);
  circle(c-50,h-40,20);
  floodfill(c-50,h-40,BLACK);
  setcolor(BLACK);
  circle(c+50,h-40,20);
  floodfill(c+50,h-40,BLACK);
  line(c-50,h+40,c+50,h+40);  // : |
//  line(c-50,h-10,c-50,h);    // :'
 // line(c-50,h+50,c-50,h+100);
  //line(c-50,h+40,c-40,h+50);  
 // line(c-40,h+50,c-30,h+60);
  delay(1000);
  cleardevice();
  setcolor(YELLOW); 
  e=getmaxy();
  f=getmaxx();
  circle(f/2,e/2,100);
  c=(f/2);
  h=(e/2);
  floodfill(c+50,h+50,YELLOW);
  setcolor(BLACK);
  circle(c-50,h-40,20);
  floodfill(c-50,h-40,BLACK);
  setcolor(BLACK);
  circle(c+50,h-40,20);
  floodfill(c+50,h-40,BLACK);
   setcolor(BLUE);
   line(c-50,h-10,c-50,h); 
  line(c+50,h-10,c+50,h); 
  line(c-50,h+5,c-50,h+10); 
  line(c+50,h+5,c+50,h+10); 
  setcolor(BLACK);
  arc(c,h+30,180,0,25);
  getch();
}
  
 
//BOUNCING BALL
#include<stdio.h>
#include<graphics.h>
void circle1(int,int,int);
void circlepoint(int,int,int,int);
main()
{
 int x,y,flag=1,y1;
 int gd=DETECT,gm;
 initgraph(&gd,&gm,"");
 x=getmaxx()/4;
 y=getmaxy()/2;
 y1=100;
 while(x<590)
 {
  flag=!(flag);
  setcolor(RED);
  circle1(30,x,y);
  floodfill(x,y,RED);
  if(flag)
  {
    y=y-y1;
    x=x+50;
    y1=y1-10;
  }
  else
  {
    y=y+y1+10;
  }
  delay(200);
  cleardevice();
 }
  setcolor(RED);
  circle1(30,x,y+y1);
  floodfill(x,y+y1,RED);
 getch();
}
void circle1(int r2,int c1,int c2)
{
  int x,y,d,q,w;
  x=0;
  y=r2;
  d=1-r2;
  q=c1;
  w=c2;
  circlepoint(x,y,q,w);
  while(y>x)
  {
    if(d<0)
    {
      d=(d+(2*x+3));
    }
    else
    {
      d=(d+(2*(x-y))+5);
      y--;
    }
    x++;
    circlepoint(x,y,q,w);
  }
}
void circlepoint(int x,int y,int c1,int c2)
{
  putpixel((x+c1),(y+c2),RED);
  putpixel((y+c1),(x+c2),RED);
  putpixel((y+c1),-x+c2,RED);
  putpixel((x+c1),-y+c2,RED);
  putpixel(-x+c1,-y+c2,RED);
  putpixel(-y+c1,-x+c2,RED);
  putpixel(-y+c1,(x+c2),RED);
  putpixel(-x+c1,(y+c2),RED);
}




//CLIP
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<graphics.h>
typedef struct coordinate
{
    int x,y;
    char code[4];
}PT;
void drawwindow();
void drawline(PT p1,PT p2);
PT setcode(PT p);
int visibility(PT p1,PT p2);
PT resetendpt(PT p1,PT p2);
 
void main()
{
    int gd=DETECT,v,gm;
    PT p1,p2,p3,p4,ptemp;
    
    printf("\nEnter x1 and y1\n");
    scanf("%d %d",&p1.x,&p1.y);
    printf("\nEnter x2 and y2\n");
    scanf("%d %d",&p2.x,&p2.y);
    
    initgraph(&gd,&gm,"");
    drawwindow();
    delay(500);
    
    drawline(p1,p2);
    delay(500);
    cleardevice();
    
    delay(500);
    p1=setcode(p1);
    p2=setcode(p2);
    v=visibility(p1,p2);
    delay(500);
    
    switch(v)
    {
    case 0: drawwindow();
            delay(500);
            drawline(p1,p2);
            break;
    case 1:    drawwindow();
            delay(500);
            break;
    case 2:    p3=resetendpt(p1,p2);
            p4=resetendpt(p2,p1);
            drawwindow();
            delay(500);
            drawline(p3,p4);
            break;
    }
    
    delay(5000);
    closegraph();
}
 
void drawwindow()
{
    line(150,100,450,100);
    line(450,100,450,350);
    line(450,350,150,350);
    line(150,350,150,100);
}
 
void drawline(PT p1,PT p2)
{
    line(p1.x,p1.y,p2.x,p2.y);
}
 
PT setcode(PT p)    //for setting the 4 bit code
{
    PT ptemp;
    
    if(p.y<100)
        ptemp.code[0]='1';    //Top
    else
        ptemp.code[0]='0';
    
    if(p.y>350)
        ptemp.code[1]='1';    //Bottom
    else
        ptemp.code[1]='0';
        
    if(p.x>450)
        ptemp.code[2]='1';    //Right
    else
        ptemp.code[2]='0';
        
    if(p.x<150)
        ptemp.code[3]='1';    //Left
    else
        ptemp.code[3]='0';
    
    ptemp.x=p.x;
    ptemp.y=p.y;
    
    return(ptemp);
}
 
int visibility(PT p1,PT p2)
{
    int i,flag=0;
    
    for(i=0;i<4;i++)
    {
        if((p1.code[i]!='0') || (p2.code[i]!='0'))
            flag=1;
    }
    
    if(flag==0)
        return(0);
    
    for(i=0;i<4;i++)
    {
        if((p1.code[i]==p2.code[i]) && (p1.code[i]=='1'))
            flag='0';
    }
    
    if(flag==0)
        return(1);
    
    return(2);
}
 
PT resetendpt(PT p1,PT p2)
{
    PT temp;
    int x,y,i;
    float m,k;
    
    if(p1.code[3]=='1')
        x=150;
    
    if(p1.code[2]=='1')
        x=450;
    
    if((p1.code[3]=='1') || (p1.code[2]=='1'))
    {
        m=(float)(p2.y-p1.y)/(p2.x-p1.x);
        k=(p1.y+(m*(x-p1.x)));
        temp.y=k;
        temp.x=x;
        
        for(i=0;i<4;i++)
            temp.code[i]=p1.code[i];
        
        if(temp.y<=350 && temp.y>=100)
            return (temp);
    }
    
    if(p1.code[0]=='1')
        y=100;
    
    if(p1.code[1]=='1')
        y=350;
        
    if((p1.code[0]=='1') || (p1.code[1]=='1'))
    {
        m=(float)(p2.y-p1.y)/(p2.x-p1.x);
        k=(float)p1.x+(float)(y-p1.y)/m;
        temp.x=k;
        temp.y=y;
        
        for(i=0;i<4;i++)
            temp.code[i]=p1.code[i];
        
        return(temp);
    }
    else
        return(p1);
}





//WINDOW TO VIEWPORT
#include<stdio.h>
#include<graphics.h>
main()
{
  int gd=DETECT,gm;
  int x1,x2,x3,x4,y1,y2,y3,y4,u1,u2,u3,u4,v1,v2,v3,v4;
  int tx1,ty1,tx2,ty2,tx3,ty3;
  int tu1,tu2,tu3,tv1,tv2,tv3;
  float d;
  printf("\n ENTER COORDINATES FOR WINDOW PORT");
  printf("\n x1,y1 : \n");
  scanf("\n%d \n%d",&x1,&y1);
  printf("\n x4,y4 : \n");
  scanf("\n%d \n%d",&x4,&y4);
  printf("\n ENTER COORDINATES FOR TRIANGLE");
  printf("\n tx1,ty1 : \n");
  scanf("\n%d \n%d",&tx1,&ty1);
  printf("\n tx2,ty2 : \n");
  scanf("\n%d \n%d",&tx2,&ty2);
  printf("\n tx3,ty3 : \n");
  scanf("\n%d \n%d",&tx3,&ty3);
  printf("\n ENTER COORDINATES FOR VIEWPORT");
  printf("\n u1,v1 : \n");
  scanf("\n%d \n%d",&u1,&v1);
  printf("\n u4,v4 : \n");
  scanf("\n%d \n%d",&u4,&v4);
  initgraph(&gd,&gm,"");
  rectangle(x1,y1,x4,y4);
  line(tx1,ty1,tx2,ty2);
  line(tx2,ty2,tx3,ty3);
  line(tx3,ty3,tx1,ty1);
  rectangle(u1,v1,u4,v4);
  d=(float)((x2-x1)/(u2-u1));
  while(x1!=0)
  {
   delay(100);
  cleardevice();
  x1=x1-1;
  x2=x2-1;
  x3=x3-1;
  x4=x4-1;
  tx1=tx1-1;
  tx2=tx2-1;
  tx3=tx3-1;
  line(tx1,ty1,tx2,ty2);
  line(tx2,ty2,tx3,ty3);
  line(tx3,ty3,tx1,ty1);
  rectangle(x1,y1,x4,y4);
  rectangle(u1,v1,u4,v4);
  }
  while(y1!=0)
  {
   delay(100);
   cleardevice();
   y1=y1-1;
   y2=y2-1;
   y3=y3-1;
   y4=y4-1;
   ty1=ty1-1;
   ty2=ty2-1;
   ty3=ty3-1;
   line(tx1,ty1,tx2,ty2);
   line(tx2,ty2,tx3,ty3);
   line(tx3,ty3,tx1,ty1);
   rectangle(x1,y1,x4,y4);
   rectangle(u1,v1,u4,v4);
  }
  tu1=(tx1/d)+u1;
  tv1=(ty1+v1);
  tu2=(tx2/d)+u1;
  tv2=(ty2+v1);
  tu3=(tx3/d)+u1;
  tv3=(ty3+v1);
  line(tu1,tv1,tu2,tv2);
  line(tu2,tv2,tu3,tv3);
  line(tu3,tv3,tu1,tv1);
  getch();
}


//WHEEL
#include<stdio.h>
#include<graphics.h>
#include<math.h>
main()
{
	double angle=0,theta;
	int i,a;
        int xc=50,yc=200,r=60;
        int x[15],y[15];
	int gd=DETECT,gm;
	initgraph(&gd,&gm,"");
	a=xc+r;
	while(!kbhit())
	{
		while(a<=630)
		{
			theta=3.14*angle/180;
			cleardevice();
			setcolor(BROWN);
	                circle(xc,yc,r);
                        setcolor(YELLOW);
                        circle(xc,yc,r+5);
			for(i=0;i<7;i++)
			{
				theta=M_PI*angle/180;
				x[i]=xc+r*cos(theta);
				y[i]=yc+r*sin(theta);
				angle+=60;
				line(xc,yc,x[i],y[i]);
			}
			angle+=2; xc+=2; a=xc+r;
			delay(100);
		}
		xc=50;	
                r=35; 
                a=xc+r;
	}
	getch();
}
